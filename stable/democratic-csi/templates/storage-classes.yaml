{{- $root := . -}}
{{- $fullName := include "democratic-csi.fullname" $root }}
{{- if .Values.storageClasses -}}
{{- range .Values.storageClasses }}
{{- $classRoot := . -}}
{{- $storageClassAnnotations := ( $classRoot.annotations | default dict ) }}
{{- if $classRoot.defaultClass }}
{{- $storageClassAnnotations = merge $storageClassAnnotations (dict "storageclass.kubernetes.io/is-default-class" "true") }}
{{- end }}
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ required "storage class name is required" $classRoot.name }}
  {{- with $storageClassAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- with $classRoot.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
    app.kubernetes.io/name: {{ include "democratic-csi.name" $root }}
    helm.sh/chart: {{ include "democratic-csi.chart" $root }}
    app.kubernetes.io/instance: {{ $root.Release.Name }}
    app.kubernetes.io/managed-by: {{ $root.Release.Service }}
provisioner: {{ $root.Values.csiDriver.name }}
reclaimPolicy: {{ $classRoot.reclaimPolicy }}
allowVolumeExpansion: {{ $classRoot.allowVolumeExpansion }}
volumeBindingMode: {{ $classRoot.volumeBindingMode }}
{{- if $classRoot.allowedTopologies }}
allowedTopologies:
{{ toYaml $classRoot.allowedTopologies }}
{{- end }}

parameters:
{{- range $k, $v := $classRoot.parameters }}
  {{ $k }}: {{ $v | quote }}
{{- end }}

{{- if $classRoot.existingSecrets }}
# all or nothing for secrets -> either the chart manages your secret or you need to manually do so
{{- range $k, $v := $classRoot.existingSecrets }}
  csi.storage.k8s.io/{{ $k }}-name: {{ $v.name }}
  csi.storage.k8s.io/{{ $k }}-namespace: {{ default $root.Release.Namespace $v.namespace }}
{{- end }}
{{- else }}
# if no existingSecrets, this loop (and the Secret creation below) will create them
{{- range $k, $v := $classRoot.secrets }}
  csi.storage.k8s.io/{{ $k }}-name: {{ printf "%s-%s-%s" $k $classRoot.name $fullName | trunc 63 | trimSuffix "-" }}
  csi.storage.k8s.io/{{ $k }}-namespace: {{ $root.Release.Namespace }}
{{- end }}
{{- end }}

{{- if $classRoot.mountOptions }}
mountOptions:
{{ toYaml $classRoot.mountOptions }}
{{- end }}
{{ end }}
{{- end }}

# if any storageClasses, look for existingSecrets (and do nothing) or secrets (and create them)
# exclusive operation -> if existingSecrets found, you must manually create properly formatted secrets.
{{- if .Values.storageClasses -}}
{{- range .Values.storageClasses }}
{{- $classRoot := . -}}
# if you have an existingSecret, we're not creating _any_ secrets for you
{{- if not $classRoot.existingSecrets }}
{{- range $k, $v := $classRoot.secrets }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ printf "%s-%s-%s" $k $classRoot.name $fullName | trunc 63 | trimSuffix "-" }}
  namespace: {{ $root.Release.Namespace }}
type: Opaque
stringData:
{{- range $k, $v := $v }}
  {{ $k }}: {{ $v | quote }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
